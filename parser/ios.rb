# Autogenerated from a Treetop grammar. Edits may be lost.


require "ip"
module Ios
  include Treetop::Runtime

  def root
    @root ||= :route_ipv4
  end

  module RouteIpv40
    def source
      elements[1]
    end

    def mask
      elements[2]
    end

    def gateway
      elements[3]
    end
  end

  def _nt_route_ipv4
    start_index = index
    if node_cache[:route_ipv4].has_key?(index)
      cached = node_cache[:route_ipv4][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('ip route', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('ip route')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_source
      s0 << r2
      if r2
        r3 = _nt_mask
        s0 << r3
        if r3
          r4 = _nt_gateway
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(RouteIpv40)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:route_ipv4][start_index] = r0

    r0
  end

  def _nt_ip_v4
    start_index = index
    if node_cache[:ip_v4].has_key?(index)
      cached = node_cache[:ip_v4][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_IPv4address

    node_cache[:ip_v4][start_index] = r0

    r0
  end

  def _nt_source
    start_index = index
    if node_cache[:source].has_key?(index)
      cached = node_cache[:source][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_ip_v4

    node_cache[:source][start_index] = r0

    r0
  end

  def _nt_mask
    start_index = index
    if node_cache[:mask].has_key?(index)
      cached = node_cache[:mask][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_ip_v4

    node_cache[:mask][start_index] = r0

    r0
  end

  def _nt_gateway
    start_index = index
    if node_cache[:gateway].has_key?(index)
      cached = node_cache[:gateway][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_ip_v4
    if r1
      r0 = r1
    else
      if has_terminal?('Null0', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('Null0')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:gateway][start_index] = r0

    r0
  end

end

class IosParser < Treetop::Runtime::CompiledParser
  include Ios
end

