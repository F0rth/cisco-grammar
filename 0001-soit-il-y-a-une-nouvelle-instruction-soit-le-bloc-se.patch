From 5995f7ad0f1ab48a3376cfb4c9125cd3fc479faf Mon Sep 17 00:00:00 2001
From: forth <forth@ela.univ-rennes1.fr>
Date: Mon, 19 Apr 2010 09:12:17 +0200
Subject: [PATCH] soit il y a une nouvelle instruction soit le bloc se termine par un !

---
 ios4r2.rb |   49 +++++++++++++++++++++++++++++--------------------
 1 files changed, 29 insertions(+), 20 deletions(-)

diff --git a/ios4r2.rb b/ios4r2.rb
index c28d6e4..5963ce3 100644
--- a/ios4r2.rb
+++ b/ios4r2.rb
@@ -39,7 +39,8 @@ class Parser
 						pointer +=1
 							token_regexp = Regexp.new(@token)
 							scan2 = StringScanner.new(@config[pointer])
-							until scan2.scan(token_regexp) == @token do
+							until scan2.scan(token_regexp) == @token or @config[pointer].include? "!" do
+							p @config[pointer]
 							@token_instruction_subconf.update({pointer+1 => @config[pointer]})
 							pointer += 1
 							scan2 = StringScanner.new(@config[pointer])
@@ -111,6 +112,7 @@ class Storage
 	
 	def add(hash_data)
 		# genuid génère un identiant unique
+		pp hash_data
 		@db[@db.genuid] = hash_data
 	end
 		
@@ -119,40 +121,47 @@ end
 z = Parser.new
 z.token = "ip access-list extended"
 z.find_lines
-z.token_instruction = z.tokens_list[4]
-#p z.token_instruction
+#z.tokens_list.each{|token|
+#z.token_instruction = token
+
+z.token_instruction = z.tokens_list[7]
+
+p z.token_instruction
 z.find_token_instruction_subconf
-#pp z.token_instruction_subconf
+pp z.token_instruction_subconf
 #z.find_grammar
 #z.load_grammar
 #z.use_grammar_on(z.tokens_list[2])
 z.grammar = "ios_acl"
 z.load_grammar
+#z.token_instruction = z.tokens_list[4]
 #p z.token_instruction_subconf
 z.use_grammar_on(z.token_instruction_subconf) 
 z.grammar_fail
 
 #pp z.parsed_hashes
 
-s = Storage.new('ios.tct')
+#s = Storage.new('ios.tct')
 
-@temp1 = Hash.new
+#@temp1 = Hash.new
 
 
-z.parsed_hashes.each_pair{|key, value|
-	@temp1.update({"index" => key})
-	value.each_pair{|key2, value2|
-		@temp1.update({key2 => value2})
-		}
-		@temp1.update({'parent' => z.token_instruction})
-		@temp1.update({'type' => 'acl'})
-	s.add(@temp1)
-	}
+#z.parsed_hashes.each_pair{|key, value|
+#	@temp1.update({"index" => key})
+#	value.each_pair{|key2, value2|
+#		@temp1.update({key2 => value2})
+#		}
+#		@temp1.update({'parent' => z.token_instruction})
+#		@temp1.update({'type' => 'acl'})
+#	s.add(@temp1)
+#	}
+
 
-  pp s.db.query { |q|
-    q.add_condition 'type', :equals, 'acl'
-    q.order_by 'index'
-  }
 
-s.db.close
+#}
+ # pp s.db.query { |q|
+ #   q.add_condition 'type', :equals, 'acl'
+ #   q.order_by 'index'
+#}
+#s.db.close
 
-- 
1.6.3.3

