# Autogenerated from a Treetop grammar. Edits may be lost.


require 'ip'

module Pix_object_group_network
  include Treetop::Runtime

  def root
    @root ||= :object
  end

  include IP

  module Object0
    def espace
      elements[2]
    end

    def network_range
      elements[3]
    end

  end

  def _nt_object
    start_index = index
    if node_cache[:object].has_key?(index)
      cached = node_cache[:object][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_espace
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?('network-object', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 14))
        @index += 14
      else
        terminal_parse_failure('network-object')
        r3 = nil
      end
      s0 << r3
      if r3
        r4 = _nt_espace
        s0 << r4
        if r4
          r5 = _nt_network_range
          s0 << r5
          if r5
            r7 = _nt_espace
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r6
            if r6
              r9 = _nt_eol
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Object0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:object][start_index] = r0

    r0
  end

  def _nt_network_object
    start_index = index
    if node_cache[:network_object].has_key?(index)
      cached = node_cache[:network_object][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_network_range

    node_cache[:network_object][start_index] = r0

    r0
  end

  module Alias0
    def text
      elements[0]
    end

  end

  def _nt_alias
    start_index = index
    if node_cache[:alias].has_key?(index)
      cached = node_cache[:alias][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_text
    s0 << r1
    if r1
      r3 = _nt_espace
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r5 = _nt_mask
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Alias0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:alias][start_index] = r0

    r0
  end

  def _nt_ip_address
    start_index = index
    if node_cache[:ip_address].has_key?(index)
      cached = node_cache[:ip_address][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_IPv4address

    node_cache[:ip_address][start_index] = r0

    r0
  end

  module SingleHost0
    def espace
      elements[1]
    end

    def ip_address
      elements[2]
    end
  end

  def _nt_single_host
    start_index = index
    if node_cache[:single_host].has_key?(index)
      cached = node_cache[:single_host][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('host', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('host')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_espace
      s0 << r2
      if r2
        r3 = _nt_ip_address
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SingleHost0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:single_host][start_index] = r0

    r0
  end

  module NetworkRange0
    def ip_address
      elements[0]
    end

    def espace
      elements[1]
    end

    def mask
      elements[2]
    end
  end

  def _nt_network_range
    start_index = index
    if node_cache[:network_range].has_key?(index)
      cached = node_cache[:network_range][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_ip_address
    s0 << r1
    if r1
      r2 = _nt_espace
      s0 << r2
      if r2
        r3 = _nt_mask
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NetworkRange0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:network_range][start_index] = r0

    r0
  end

  def _nt_mask
    start_index = index
    if node_cache[:mask].has_key?(index)
      cached = node_cache[:mask][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_ip_address

    node_cache[:mask][start_index] = r0

    r0
  end

  def _nt_text
    start_index = index
    if node_cache[:text].has_key?(index)
      cached = node_cache[:text][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[0-9a-zA-Z\\-\\_]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:text][start_index] = r0

    r0
  end

  module Eol0
  end

  def _nt_eol
    start_index = index
    if node_cache[:eol].has_key?(index)
      cached = node_cache[:eol][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[\\x0D]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[\\x0A]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Eol0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:eol][start_index] = r0

    r0
  end

  def _nt_espace
    start_index = index
    if node_cache[:espace].has_key?(index)
      cached = node_cache[:espace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[" "]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:espace][start_index] = r0

    r0
  end

end

class Pix_object_group_networkParser < Treetop::Runtime::CompiledParser
  include Pix_object_group_network
end

