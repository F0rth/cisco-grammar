# Autogenerated from a Treetop grammar. Edits may be lost.


require 'ip'

module Ip_route
  include Treetop::Runtime

  def root
    @root ||= :route_ipv4
  end

  include IP

  module RouteIpv40
    def source
      elements[3]
    end

    def mask
      elements[5]
    end

    def gateway
      elements[7]
    end

    def comment
      elements[9]
    end

  end

  def _nt_route_ipv4
    start_index = index
    if node_cache[:route_ipv4].has_key?(index)
      cached = node_cache[:route_ipv4][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_espace
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?('ip route', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 8))
        @index += 8
      else
        terminal_parse_failure('ip route')
        r3 = nil
      end
      s0 << r3
      if r3
        r5 = _nt_espace
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r6 = _nt_source
          s0 << r6
          if r6
            r8 = _nt_espace
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r7
            if r7
              r9 = _nt_mask
              s0 << r9
              if r9
                r11 = _nt_espace
                if r11
                  r10 = r11
                else
                  r10 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r10
                if r10
                  r12 = _nt_gateway
                  s0 << r12
                  if r12
                    r14 = _nt_espace
                    if r14
                      r13 = r14
                    else
                      r13 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r13
                    if r13
                      r15 = _nt_comment
                      s0 << r15
                      if r15
                        r17 = _nt_eol
                        if r17
                          r16 = r17
                        else
                          r16 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s0 << r16
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(RouteIpv40)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:route_ipv4][start_index] = r0

    r0
  end

  def _nt_espace
    start_index = index
    if node_cache[:espace].has_key?(index)
      cached = node_cache[:espace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[" "]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:espace][start_index] = r0

    r0
  end

  def _nt_source
    start_index = index
    if node_cache[:source].has_key?(index)
      cached = node_cache[:source][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_IPv4address

    node_cache[:source][start_index] = r0

    r0
  end

  def _nt_mask
    start_index = index
    if node_cache[:mask].has_key?(index)
      cached = node_cache[:mask][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_IPv4address

    node_cache[:mask][start_index] = r0

    r0
  end

  def _nt_gateway
    start_index = index
    if node_cache[:gateway].has_key?(index)
      cached = node_cache[:gateway][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_IPv4address
    if r1
      r0 = r1
    else
      if has_terminal?('Null0', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('Null0')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:gateway][start_index] = r0

    r0
  end

  module Comment0
    def espace
      elements[1]
    end

  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('!', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('!')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_espace
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[^\\x0A]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comment0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comment][start_index] = r0

    r0
  end

  def _nt_eol
    start_index = index
    if node_cache[:eol].has_key?(index)
      cached = node_cache[:eol][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[\\x0A]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:eol][start_index] = r0

    r0
  end

end

class Ip_routeParser < Treetop::Runtime::CompiledParser
  include Ip_route
end

