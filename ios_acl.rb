# Autogenerated from a Treetop grammar. Edits may be lost.


require 'ip'

module Ios_acl
  include Treetop::Runtime

  def root
    @root ||= :acl
  end

  include IP

  module Acl0
    def action
      elements[1]
    end

    def proto
      elements[3]
    end

    def source_ip
      elements[5]
    end

    def destination_ip
      elements[9]
    end

    def eol
      elements[13]
    end
  end

  def _nt_acl
    start_index = index
    if node_cache[:acl].has_key?(index)
      cached = node_cache[:acl][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_espace
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_action
      s0 << r3
      if r3
        r5 = _nt_espace
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r6 = _nt_proto
          s0 << r6
          if r6
            r8 = _nt_espace
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r7
            if r7
              r9 = _nt_source_ip
              s0 << r9
              if r9
                r11 = _nt_espace
                if r11
                  r10 = r11
                else
                  r10 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r10
                if r10
                  r13 = _nt_source_port
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r12
                  if r12
                    r15 = _nt_espace
                    if r15
                      r14 = r15
                    else
                      r14 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r14
                    if r14
                      r16 = _nt_destination_ip
                      s0 << r16
                      if r16
                        r18 = _nt_espace
                        if r18
                          r17 = r18
                        else
                          r17 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s0 << r17
                        if r17
                          r20 = _nt_destination_port
                          if r20
                            r19 = r20
                          else
                            r19 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s0 << r19
                          if r19
                            r22 = _nt_espace
                            if r22
                              r21 = r22
                            else
                              r21 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s0 << r21
                            if r21
                              r23 = _nt_eol
                              s0 << r23
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Acl0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:acl][start_index] = r0

    r0
  end

  def _nt_action
    start_index = index
    if node_cache[:action].has_key?(index)
      cached = node_cache[:action][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('permit', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('permit')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('deny', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('deny')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:action][start_index] = r0

    r0
  end

  def _nt_proto
    start_index = index
    if node_cache[:proto].has_key?(index)
      cached = node_cache[:proto][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('tcp', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('tcp')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('udp', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('udp')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('esp', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure('esp')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('ip', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('ip')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('icmp', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 4))
              @index += 4
            else
              terminal_parse_failure('icmp')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?('any', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
                @index += 3
              else
                terminal_parse_failure('any')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:proto][start_index] = r0

    r0
  end

  def _nt_source_ip
    start_index = index
    if node_cache[:source_ip].has_key?(index)
      cached = node_cache[:source_ip][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_single_host
    if r1
      r0 = r1
    else
      r2 = _nt_network_range
      if r2
        r0 = r2
      else
        if has_terminal?('any', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure('any')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:source_ip][start_index] = r0

    r0
  end

  def _nt_ip_address
    start_index = index
    if node_cache[:ip_address].has_key?(index)
      cached = node_cache[:ip_address][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_IPv4address

    node_cache[:ip_address][start_index] = r0

    r0
  end

  module SingleHost0
    def espace
      elements[1]
    end

    def ip_address
      elements[2]
    end
  end

  def _nt_single_host
    start_index = index
    if node_cache[:single_host].has_key?(index)
      cached = node_cache[:single_host][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('host', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('host')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_espace
      s0 << r2
      if r2
        r3 = _nt_ip_address
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SingleHost0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:single_host][start_index] = r0

    r0
  end

  module NetworkRange0
    def ip_address
      elements[0]
    end

    def espace
      elements[1]
    end

    def mask
      elements[2]
    end
  end

  def _nt_network_range
    start_index = index
    if node_cache[:network_range].has_key?(index)
      cached = node_cache[:network_range][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_ip_address
    s0 << r1
    if r1
      r2 = _nt_espace
      s0 << r2
      if r2
        r3 = _nt_mask
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NetworkRange0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:network_range][start_index] = r0

    r0
  end

  def _nt_mask
    start_index = index
    if node_cache[:mask].has_key?(index)
      cached = node_cache[:mask][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_ip_address

    node_cache[:mask][start_index] = r0

    r0
  end

  def _nt_destination_ip
    start_index = index
    if node_cache[:destination_ip].has_key?(index)
      cached = node_cache[:destination_ip][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_source_ip

    node_cache[:destination_ip][start_index] = r0

    r0
  end

  def _nt_source_port
    start_index = index
    if node_cache[:source_port].has_key?(index)
      cached = node_cache[:source_port][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_single_port
    if r1
      r0 = r1
    else
      r2 = _nt_port_range
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:source_port][start_index] = r0

    r0
  end

  def _nt_destination_port
    start_index = index
    if node_cache[:destination_port].has_key?(index)
      cached = node_cache[:destination_port][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_source_port

    node_cache[:destination_port][start_index] = r0

    r0
  end

  module SinglePort0
    def espace
      elements[1]
    end

  end

  def _nt_single_port
    start_index = index
    if node_cache[:single_port].has_key?(index)
      cached = node_cache[:single_port][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('eq', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('eq')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('gt', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('gt')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_espace
      s0 << r4
      if r4
        i5 = index
        r6 = _nt_port_number
        if r6
          r5 = r6
        else
          r7 = _nt_port_name
          if r7
            r5 = r7
          else
            @index = i5
            r5 = nil
          end
        end
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SinglePort0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:single_port][start_index] = r0

    r0
  end

  module PortRange0
    def espace1
      elements[1]
    end

    def espace2
      elements[3]
    end

  end

  def _nt_port_range
    start_index = index
    if node_cache[:port_range].has_key?(index)
      cached = node_cache[:port_range][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('range', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('range')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_espace
      s0 << r2
      if r2
        i3 = index
        r4 = _nt_port_number
        if r4
          r3 = r4
        else
          r5 = _nt_port_name
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        s0 << r3
        if r3
          r6 = _nt_espace
          s0 << r6
          if r6
            i7 = index
            r8 = _nt_port_number
            if r8
              r7 = r8
            else
              r9 = _nt_port_name
              if r9
                r7 = r9
              else
                @index = i7
                r7 = nil
              end
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(PortRange0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:port_range][start_index] = r0

    r0
  end

  def _nt_port_number
    start_index = index
    if node_cache[:port_number].has_key?(index)
      cached = node_cache[:port_number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:port_number][start_index] = r0

    r0
  end

  def _nt_port_name
    start_index = index
    if node_cache[:port_name].has_key?(index)
      cached = node_cache[:port_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[a-zA-Z]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:port_name][start_index] = r0

    r0
  end

  module Comment0
    def espace
      elements[1]
    end

  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('!', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('!')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_espace
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[^\\x0A]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comment0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comment][start_index] = r0

    r0
  end

  def _nt_eol
    start_index = index
    if node_cache[:eol].has_key?(index)
      cached = node_cache[:eol][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[\\x0A]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:eol][start_index] = r0

    r0
  end

  def _nt_espace
    start_index = index
    if node_cache[:espace].has_key?(index)
      cached = node_cache[:espace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[" "]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:espace][start_index] = r0

    r0
  end

end

class Ios_aclParser < Treetop::Runtime::CompiledParser
  include Ios_acl
end

