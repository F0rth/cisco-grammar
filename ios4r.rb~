require 'strscan'
require 'yaml'
require 'pp'

class Netobj
	attr_accessor :type, :name, :parent, :payload
	
	def initialize(type, name, parent = self, payload)
	@type = type
	@name = name
	@parent = parent
	@payload = payload
	end
	
	def self.list(*netobjs)
		netobjs.find_all()
	end

end

class Parser

	attr_accessor :config
	
	
	def initialize
	@config = IO.readlines(ARGV[0], :encoding => 'ISO8859-15')
	
	end
	
	def find_instructions_list
		file = File.open('token.yaml')
		wanted_instructions = YAML.load(file)
		id=0
		wanted_instructions.each_index { |wanted_index|
		tableau= Array.new
			wanted_instruction_regexp = Regexp.new(wanted_instructions[wanted_index])
			@config.each_index {|index|
			scan = StringScanner.new(@config[index])
				if scan.scan(wanted_instruction_regexp) == wanted_instructions[wanted_index]
				
				#tableau = tableau + @confing[index].chomp.lstrip.lines.to_a
				#tableau << Object.const_set(wanted_instructions[wanted_index].capitalize, Class.new(NetObj))
				p Object.module_eval("::Netobj").new(wanted_instructions[wanted_index], @config[index], nil)
				index +=1
				scan = StringScanner.new(@config[index])
				#p tableau
				id +=1
				end

			}
		#@instructions_list = @instructions_list.to_a + wanted_instructions[wanted_index].lines.to_a +  tableau
		
		
		
		}
	#pp @instructions_list.to_yaml
	end
end


z = Parser.new
z.find_instructions_list
p Netobj.list
